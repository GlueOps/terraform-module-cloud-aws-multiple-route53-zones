# placeholder_repo_name

_Welcome to the tenant repository, used to manage a kubernetes deployment with the GlueOps Platform!_

## Overview
This README will outline the steps required to:

1. Create the necessary Accounts/Projects/Credentials to deploy kubernetes.
2. Deploy Kubernetes in the desired cloud. 
3. Deploy the GlueOps Platform (including ArgoCD) on the Kubernetes Cluster.
4. Tear down the cluster when it is no longer needed.

## Prerequisites
1. User account in the desired cloud with necessary permissions to create Service Users capable of deploying a Kubernetes cluster.
2. A [GlueOps codespace](https://github.com/GlueOps/glueops) at the latest version, which contains necessary tooling. <br /> **Note:** To ensure the latest version is used, [create a new Codespace with options](https://github.com/codespaces/new?hide_repo_select=true&ref=%F0%9F%9A%80%F0%9F%92%8E%F0%9F%99%8C%F0%9F%9A%80&repo=527049979) and select the newest version of `Dev container configuration`.
3. This repository, `placeholder_repo_name`, cloned into the codespace required above. Once the Codespace is created, the repo can be cloned using 

```sh
gh repo clone placeholder_github_owner/placeholder_repo_name
```


## Select Cloud
- [GCP](#GCP)
- [AWS](#AWS)

## GCP

### Deploy Kubernetes
1. Create Credentials
    * [Launch a CloudShell](https://console.cloud.google.com/home/dashboard?cloudshell=true) in your desired GCP project.
    * Execute the following command in the cloudshell.  Click 'Authorize' if prompted and confirm the creation of the project

    ```sh
    source <(curl -s https://raw.githubusercontent.com/GlueOps/development-only-utilities/feature/gcp-project-tools/tools/gcp/gcp-project-setup) && \
        gcp-project-setup -p placeholder_tenant_key-placeholder_cluster_environment
    ```

    * Copy the contents of the `creds.json` file that was generated by the above command into the root directory of this repository (placeholder_repo_name), within the codespace.

2. Deploy Kubernetes with Terraform
    * Set credentials for Terraform using the `creds.json` created in step 1a.:

    ```sh
    export GOOGLE_CREDENTIALS=$(pwd)/creds.json
    ```

    * Reference documents for [terraform-module-cloud-gcp-kubernetes-cluster](https://github.com/GlueOps/terraform-module-cloud-gcp-kubernetes-cluster) and use the pre-created directory `terraform/kubernetes` within this repo for the `main.tf` file to deploy the cluster.
    * **At minimum**, the parameter `project_id` must be updated

3. Access the new Kubernetes Cluster by running the below command to set up kubeconfig. <br />Run this command from the directory containing the `creds.json` file.<br /> Also note that the default region in this command is `us-central1-a`.  This region can be overridden with the `-r` or `--region` flag.

    ```sh
    source <(curl -s https://raw.githubusercontent.com/GlueOps/development-only-utilities/feature/gcp-project-tools/tools/gcp/gke-auth) && \
        gke-auth
    ```
4. Now that Kubernetes is deployed and can be accessed, being [deploying the GlueOps Platform](#Deploying-GlueOps-the-Platform)


## AWS

### Deploy Kubernetes
1. Create Credentials
    * [Launch a CloudShell](https://us-east-1.console.aws.amazon.com/cloudshell/home?region=us-west-2) within the Primary/Root AWS Account.
    * Execute the following command in the cloudshell.  When prompted, enter the name of your captain account (e.g. glueops-captain-laciudaddelgato).

    ```sh
    bash <(curl -s https://raw.githubusercontent.com/GlueOps/development-only-utilities/aws/tools/aws/account-setup.sh)
    ```

    * Create the`.env` as instructed into this repository, within the codespace.

2. Deploy Kubernetes with Terraform
    * Set credentials for Terraform using the `.env` created in step 1a.:

    ```sh
    export $(pwd)/.env
    ```

    * Reference documents for [terraform-module-cloud-aws-kubernetes-cluster](https://github.com/GlueOps/terraform-module-cloud-aws-kubernetes-cluster) and use the pre-created directory `terraform/kubernetes` within this repo for the `main.tf` file to deploy the cluster.

3. Access the new Kubernetes Cluster by running the below command to set up kubeconfig

    ```sh
    aws eks update-kubeconfig --region us-west-2 --name captain-cluster
    ```

4. Now that Kubernetes is deployed and can be accessed, being [deploying the GlueOps Platform](#Deploying-GlueOps-the-Platform)

## Deploying GlueOps the Platform

1. Deploy ArgoCD
    * Install the CRDs that match the version of the app in the helm chart <br /> **Note:** The appVersion can be found [here](https://github.com/argoproj/argo-helm/blob/main/charts/argo-cd/Chart.yaml).  Be sure to select the desired version of the ArgoCD chart.
    ```sh
    kubectl apply -k "https://github.com/argoproj/argo-cd/manifests/crds?ref=v2.6.7"
    ```
    * Confirm helm repositories are up to date
    ```sh
    helm repo update
    ```
    * Install ArgoCD. <br />This command includes `--skip-crds` but the way the chart works we also have a value we need to set to false so that the CRD's do not work. This value is in the argocd.yaml
    ```sh
    helm install argocd argo/argo-cd --skip-crds --version 5.29.1 -f argocd.yaml --namespace=glueops-core --create-namespace
    ```
    * Monitor ArgoCD installation using the below command until all pods are fully ready. <br />Likely, `argocd-redis-ha-server-*` pods will be slowest.  Wait until 3 pods with 3 replicas each are deployed.
    ```sh
    watch kubectl get pods -n glueops-core
    ```
2. Deploy the GlueOps Platform
    * Install the GlueOps platform using
    ```sh
    helm install glueops-platform glueops-platform/glueops-platform --version 0.11.0 -f platform.yaml --namespace=glueops-core
    ```
    * Monitor application progress until all services are `Synced` and `Healthy` **except** `vault`, which will show `Synced` and `Progressing`
    ```sh
    watch kubectl get applications -n glueops-core
    ```
    * [Initialize Vault](https://github.com/GlueOps/terraform-module-kubernetes-hashicorp-vault-initialization)
    * [Configure Vault](https://github.com/GlueOps/terraform-module-kubernetes-hashicorp-vault-configuration)
3. Access Cluster services
    * [ArgoCD](https://argocd.placeholder_repo_name)
    * [Valult](https://vault.placeholder_repo_name)
    * [Grafana](https://grafana.placeholder_repo_name)

### Teardown Kubernetes

- [AWS](#AWS-Teardown)
- [GCP](#GCP-Teardown)

### AWS Teardown

Use the following command to destroy the cluster when it is no longer needed.
* [Launch a CloudShell](https://us-east-1.console.aws.amazon.com/cloudshell/home?region=us-west-2) within the Primary/Root AWS Account.
    * Execute the following command in the cloudshell.  When prompted, enter the name of your captain account (e.g. glueops-captain-laciudaddelgato).

```sh
bash <(curl -s https://raw.githubusercontent.com/GlueOps/development-only-utilities/aws/tools/aws/account-nuke.sh)
```

### GCP Teardown

Use the following command to destroy the cluster when it is no longer needed.
* [Launch a CloudShell](https://console.cloud.google.com/home/dashboard?cloudshell=true) in your desired GCP project.
    * Execute the following command in the cloudshell.  Click 'Authorize' if prompted and confirm the deletion of the project

```sh
source <(curl -s https://raw.githubusercontent.com/GlueOps/development-only-utilities/feature/gcp-project-tools/tools/gcp/gcp-project-teardown) && \
    gcp-project-teardown -p placeholder_tenant_key-placeholder_cluster_environment
```
